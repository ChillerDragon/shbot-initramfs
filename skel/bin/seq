#!/bin/bash

start=1 step=1 end=0 

case $# in
    0) printf 'Did you forget something?\n' >&2; exit 1 ;;
    1) end=$1 ;;
    2) start=$1 end=$2 ;;
    3) start=$1 step=$2 end=$3 ;;
    *) printf 'Too much information!\n' >&2; exit 1 ;;
esac

within_reason() {
    local arg
    for arg; do
        arg=${arg#-}
        [[ $(bc <<< "2^63 - 1 - $arg") != -* ]] || return
    done
}

if ! within_reason "$@"; then
    printf "Let's keep it within 64 bit integers\n" >&2
    exit 1
fi

simple_nums=( zero one two three four five six seven eight nine ten
              eleven twelve thirteen fourteen fifteen sixteen seventeen
              eighteen nineteen twenty )

tens=( [1]=ten twenty thirty fourty fifty sixty seventy eighty ninety )
units=( [1]=thousand million billion trillion quadrillion quintillion
        fantazillion )
printnum() {
    local num=$1 e=0 i part res=() IFS=' '

    if (( num < 0 )); then
        res+=( minus )
        (( num *= -1 ))
    fi

    if (( num == 0 )); then
        res+=( "${simple_nums[num]}" )
        printf '%s\n' "${res[*]}"
        return
    fi

    for ((e=1; e<=6; ++e)); do
        (( num < 10**(e*3) )) && break
    done

    while (( --e >= 0 )); do
        (( part = num / (10**(e*3)) )) 
        (( num -= part * (10**(e*3)) ))

        if (( part >= 100 )); then
            res+=( "${simple_nums[part/100]}" hundred )
            if [[ $part = *00 ]]; then
                continue
            fi
            res+=( and )
            (( part %= 100 ))
        elif (( num >= 1000 && e == 0 && part > 0 )); then
            res+=( and )
        fi

        if (( part > 0 && part % 10 == 0 )); then
            res+=( "${tens[part/10]}" "${units[e]}" )
        elif (( part > 20 )); then
            res+=( "${tens[part/10]}-${simple_nums[part%10]}"
                   "${units[e]}" )
        elif (( part > 0 )); then
            res+=( "${simple_nums[part]}" "${units[e]}" )
        fi
    done

    printf '%s\n' "${res[*]}"
}

if (( step > 0 && start <= end )); then
    for (( i = start; i < end; i += step )); do
        printnum "$i"
    done
elif (( step < 0 && start >= end )); then
    for (( i = start; i > end; i += step )); do
        printnum "$i"
    done
else
    printf 'Nice try\n' >&2
    exit 1
fi
printnum "$i"
